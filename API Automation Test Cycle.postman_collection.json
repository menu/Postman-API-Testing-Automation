{
	"info": {
		"_postman_id": "d6d4e5c8-a813-4086-b7c0-c67463ba6775",
		"name": "API Automation Test Cycle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24262633"
	},
	"item": [
		{
			"name": "Get All Users List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseURL}}users",
					"host": [
						"{{baseURL}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const getRandomGender = () => Math.random() < 0.5 ? \"male\" : \"female\";\r",
							"const getRandomStatus = () => Math.random() < 0.5 ? \"active\" : \"inactive\";\r",
							"\r",
							"pm.collectionVariables.set(\"name\", pm.variables.replaceIn(\"{{$randomFullName}}\"));\r",
							"pm.collectionVariables.set(\"gender\", pm.variables.replaceIn(getRandomGender()));\r",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
							"pm.collectionVariables.set(\"status\", pm.variables.replaceIn(getRandomStatus()));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Request and response data equal\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"userID\", jsonData.id);\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name\"));\r",
							"    pm.expect(jsonData.gender).to.eql(pm.collectionVariables.get(\"gender\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{name}}\", \"gender\":\"{{gender}}\", \"email\":\"{{email}}\", \"status\":\"{{status}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}users",
					"host": [
						"{{baseURL}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get New User Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name\"));\r",
							"    pm.expect(jsonData.gender).to.eql(pm.collectionVariables.get(\"gender\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"userID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseURL}}users/{{userID}}",
					"host": [
						"{{baseURL}}users"
					],
					"path": [
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update New User Data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const getRandomGender = () => Math.random() < 0.5 ? \"male\" : \"female\";\r",
							"const getRandomStatus = () => Math.random() < 0.5 ? \"active\" : \"inactive\";\r",
							"\r",
							"pm.collectionVariables.set(\"name\", pm.variables.replaceIn(\"{{$randomFullName}}\"));\r",
							"pm.collectionVariables.set(\"gender\", pm.variables.replaceIn(getRandomGender()));\r",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
							"pm.collectionVariables.set(\"status\", pm.variables.replaceIn(getRandomStatus()));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Updated data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"name\"));\r",
							"    pm.expect(jsonData.gender).to.eql(pm.collectionVariables.get(\"gender\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(jsonData.status).to.eql(pm.collectionVariables.get(\"status\"));\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"userID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{name}}\", \"gender\":\"{{gender}}\", \"email\":\"{{email}}\", \"status\":\"{{status}}\"}"
				},
				"url": {
					"raw": "{{baseURL}}users/{{userID}}",
					"host": [
						"{{baseURL}}users"
					],
					"path": [
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseURL}}users/{{userID}}",
					"host": [
						"{{baseURL}}users"
					],
					"path": [
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify User Is Deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error meassage\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Resource not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseURL}}users/{{userID}}",
					"host": [
						"{{baseURL}}users"
					],
					"path": [
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://gorest.co.in/public/v2/",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "gender",
			"value": "",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "status",
			"value": "",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		}
	]
}